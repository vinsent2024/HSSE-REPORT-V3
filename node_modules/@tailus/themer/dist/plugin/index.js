"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.appearance = exports.setAppearance = exports.themer = void 0;
var plugin_1 = __importDefault(require("tailwindcss/plugin"));
var shadow_1 = __importDefault(require("./shadow"));
var default_config_1 = __importStar(require("./default.config"));
var preconfigs_1 = __importDefault(require("./preconfigs"));
var preconfigs_2 = require("./../config/preconfigs");
var themerGrays = __importStar(require("./../lib/colors/additionalGrays"));
var getIntent_1 = require("./../lib/colors/getIntent");
var appearance = "both";
exports.appearance = appearance;
/**
 * ### Tailus Themer plugin ðŸª„.
 * @param options : The options of the plugin.
 * @returns The plugin.
 */
var themer = plugin_1.default.withOptions(function (options) {
    if (options === void 0) { options = {}; }
    return function (_a) {
        var addComponents = _a.addComponents, addBase = _a.addBase, matchUtilities = _a.matchUtilities, theme = _a.theme;
        var preconfigs = (0, preconfigs_1.default)(default_config_1.preconfigs, options);
        var config = {
            components: __assign(__assign({}, (0, default_config_1.default)(preconfigs)), options.components),
        };
        addBase({
            ":root": {
                //Accordion
                "--accordion-border-radius": theme("borderRadius.".concat(config.components.accordion.rounded)),
                "--accordion-ghost-light-bg": theme("colors.gray.".concat(config.components.accordion.ghostBg)),
                "--accordion-soft-light-bg": theme("colors.gray.".concat(config.components.accordion.softBg)),
                "--accordion-ghost-dark-bg": theme("colors.gray.".concat(config.components.accordion.dark.ghostBg)),
                "--accordion-soft-dark-bg": theme("colors.gray.".concat(config.components.accordion.dark.softBg)),
                "--accordion-dark-bg": theme("colors.gray.".concat(config.components.accordion.dark.elevatedBg)),
                "--accordion-shadow": (0, shadow_1.default)("accordion")[config.components.accordion.shadow.size],
                "--accordion-shadow-opacity": "".concat(config.components.accordion.shadow.opacity, "%"),
                //Alert
                "--alert-border-radius": theme("borderRadius.".concat(config.components.alert.rounded)),
                "--alert-shadow": (0, shadow_1.default)("alert")[config.components.alert.shadow.size],
                "--alert-shadow-opacity": "".concat(config.components.alert.shadow.opacity, "%"),
                //Annonce
                "--annonce-border-radius": theme("borderRadius.".concat(config.components.annonce.rounded)),
                // Avatar
                "--avatar-border-radius": theme("borderRadius.".concat(config.components.avatar.rounded)),
                "--avatar-status-position": theme("spacing.".concat(config.components.avatar.statusInset)),
                // Badge
                "--badge-border-radius": theme("borderRadius.".concat(config.components.badge.rounded)),
                // Button
                "--btn-border-radius": theme("borderRadius.".concat(config.components.button.rounded)),
                "--btn-border-width": "".concat(config.components.button.borderWith, "px"),
                // Card
                "--card-border-radius": theme("borderRadius.".concat(config.components.card.rounded)),
                "--card-shadow": (0, shadow_1.default)("card")[config.components.card.shadow.size],
                "--card-shadow-opacity": "".concat(config.components.card.shadow.opacity, "%"),
                "--card-padding": theme("spacing.".concat(config.components.card.padding)),
                "--card-light-bg": theme("colors.gray.".concat(config.components.card.bg)),
                "--card-dark-bg": theme("colors.gray.".concat(config.components.card.dark.bg)),
                // Menu
                "--menu-border-radius": theme("borderRadius.".concat(config.components.menu.rounded)),
                "--menu-light-bg-opacity": "".concat(config.components.menu.bgOpacity, "%"),
                "--menu-dark-bg-opacity": "".concat(config.components.menu.dark.bgOpacity, "%"),
                "--menu-dark-bg": theme("colors.gray.".concat(config.components.menu.dark.bg, " / var(--menu-dark-bg-opacity)")),
                "--menu-shadow": (0, shadow_1.default)("menu")[config.components.menu.shadow.size],
                "--menu-shadow-opacity": "".concat(config.components.menu.shadow.opacity, "%"),
                "--menu-light-backdrop-blur": "".concat(config.components.menu.backdropBlur, "rem"),
                "--menu-dark-backdrop-blur": "".concat(config.components.menu.backdropBlur, "rem"),
                "--menu-light-border-color": theme("colors.gray.".concat(config.components.menu.borderColor)),
                "--menu-dark-border-color": theme("colors.gray.".concat(config.components.menu.dark.borderColor)),
                // Feedback
                "--feedback-shadow": (0, shadow_1.default)("feedback")[config.components.feedback.shadow.size],
                "--feedback-shadow-opacity": "".concat(config.components.feedback.shadow.opacity, "%"),
                "--feedback-dark-bg": theme("colors.gray.".concat(config.components.feedback.dark.bg)),
                "--feedback-light-border-color": theme("colors.gray.".concat(config.components.feedback.borderColor)),
                "--feedback-dark-border-color": theme("colors.gray.".concat(config.components.feedback.dark.borderColor)),
                // Flag
                "--flag-border-radius": theme("borderRadius.".concat(config.components.flag.rounded)),
                "--flag-padding": theme("spacing.".concat(config.components.flag.padding)),
                // Field
                "--field-border-radius": theme("borderRadius.".concat(config.components.field.rounded)),
                "--field-light-bg": theme("colors.gray.".concat(config.components.field.softBg)),
                "--field-light-focus-bg": theme("colors.gray.".concat(config.components.field.softBgFocus)),
                "--field-dark-bg": theme("colors.gray.".concat(config.components.field.dark.softBg)),
                "--field-dark-focus-bg": theme("colors.gray.".concat(config.components.field.dark.softBgFocus)),
                "--field-light-border-color": theme("colors.gray.".concat(config.components.field.borderColor)),
                "--field-dark-border-color": theme("colors.gray.".concat(config.components.field.dark.borderColor)),
                // Popover
                "--popover-border-radius": theme("borderRadius.".concat(config.components.popover.rounded)),
                "--popover-padding": theme("spacing.".concat(config.components.popover.padding)),
                // Switch
                "--switch-border-radius": theme("borderRadius.".concat(config.components.switch.rounded)),
                // Tabs
                "--tabs-border-radius": theme("borderRadius.".concat(config.components.tabs.rounded.list)),
                "--tabs-light-bg": theme("colors.gray.".concat(config.components.tabs.listBg)),
                "--tabs-dark-bg": theme("colors.gray.".concat(config.components.tabs.dark.listBg)),
                "--tabs-indicator-dark-bg": theme("colors.gray.".concat(config.components.tabs.dark.indicatorBg)),
                "--tabs-bottom-indicator-trigger-dark-bg": theme("colors.gray.".concat(config.components.tabs.dark.triggerBg)),
                "--tabs-bottom-indicator-light-bg": theme("colors.primary.600"),
                "--tabs-bottom-indicator-dark-bg": theme("colors.primary.400"),
                "--tabs-light-border-color": theme("colors.gray.".concat(config.components.tabs.borderColor)),
                "--tabs-dark-border-color": theme("colors.gray.".concat(config.components.tabs.dark.borderColor)),
                "--tabs-soft-border-radius": theme("borderRadius.".concat(config.components.tabs.rounded.softVariant)),
                "--tabs-bottom-indicator-border-radius": theme("borderRadius.".concat(config.components.tabs.rounded.bottomIndicatorVariant)),
                // Tooltip
                "--tooltip-border-radius": theme("borderRadius.".concat(config.components.tooltip.rounded)),
                // Toast
                "--toast-border-radius": theme("borderRadius.".concat(config.components.toast.rounded)),
                // Separator
                "--separator-light-color": theme("colors.gray.".concat(config.components.ui.borderColor)),
                "--separator-dark-color": theme("colors.gray.".concat(config.components.ui.dark.borderColor)),
                // UI
                "--ui-light-border-color": theme("colors.gray.".concat(config.components.ui.borderColor)),
                "--ui-dark-border-color": theme("colors.gray.".concat(config.components.ui.dark.borderColor)),
                "--ui-light-border-hover-color": theme("colors.gray.".concat(config.components.ui.hoverBorderColor)),
                "--ui-dark-border-hover-color": theme("colors.gray.".concat(config.components.ui.dark.hoverBorderColor)),
                // Select
                "--select-dark-bg": theme("colors.gray.".concat(config.components.select.dark.bg)),
            },
        });
        addComponents({
            ".accordion-shadow": {
                boxShadow: "var(--accordion-shadow)",
            },
            ".alert-shadow": {
                boxShadow: "var(--alert-shadow)",
            },
            ".card-shadow": {
                boxShadow: "var(--card-shadow)",
            },
            ".feedback-shadow": {
                boxShadow: "var(--feedback-shadow)",
            },
            ".menu-shadow": {
                boxShadow: "var(--menu-shadow)",
            },
        });
        matchUtilities({
            perspective: function (value) { return ({
                perspective: value,
            }); },
        });
    };
}, function (options) {
    var palette = (0, preconfigs_1.default)(default_config_1.preconfigs, options).palette;
    return {
        theme: {
            extend: {
                colors: function (_a) {
                    var colors = _a.colors;
                    return ({
                        primary: (0, getIntent_1.getIntentValue)(colors, palette.primary, preconfigs_2.palettes[palette.extend].primary),
                        secondary: (0, getIntent_1.getIntentValue)(colors, palette.secondary, preconfigs_2.palettes[palette.extend].secondary),
                        accent: (0, getIntent_1.getIntentValue)(colors, palette.accent, preconfigs_2.palettes[palette.extend].accent),
                        info: (0, getIntent_1.getIntentValue)(colors, palette.info, preconfigs_2.palettes[palette.extend].info),
                        success: (0, getIntent_1.getIntentValue)(colors, palette.success, preconfigs_2.palettes[palette.extend].success),
                        danger: (0, getIntent_1.getIntentValue)(colors, palette.danger, preconfigs_2.palettes[palette.extend].danger),
                        warning: (0, getIntent_1.getIntentValue)(colors, palette.warning, preconfigs_2.palettes[palette.extend].warning),
                        gray: (0, getIntent_1.getIntentValue)(colors, palette.gray, preconfigs_2.palettes[palette.extend].gray) ||
                            colors[preconfigs_2.palettes[palette.extend].gray] ||
                            themerGrays[preconfigs_2.palettes[palette.extend].gray],
                    });
                },
            },
        },
    };
});
exports.themer = themer;
var setAppearance = function (value) {
    exports.appearance = appearance = value;
};
exports.setAppearance = setAppearance;
